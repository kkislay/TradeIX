/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.3
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import gherkin.lexer.Id;
import io.swagger.client.ApiException;
import java.io.File;

import io.swagger.client.ApiResponse;
import io.swagger.client.auth.ApiKeyAuth;
import io.swagger.client.model.Category;
import io.swagger.client.model.ModelApiResponse;
import io.swagger.client.model.Pet;
import io.swagger.client.model.Tag;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.util.*;

/**
 * API tests for PetApi
 */

public class PetApiTest {
    private ApiResponse <Pet> body_response;
    private final PetApi api = new PetApi();
    private Pet body = new Pet();
    
    /**
     * Add a new pet to the store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */

    @Given("^Create a pet with Name (.+) Id (.+) Category (.+) Tags (.+) Status (.+) PhotoUrls (.+)$")
    public void addPetTest(String Name, String Id, String Category, String Tags, String Status, String PhotorUls) throws ApiException {
        Category cat = new Category();
            body.setName(Name);
            body.setId(Long.valueOf(Id));
            body.setStatus(Pet.StatusEnum.fromValue(Status));
            String[] tagsArray = Tags.split(";");
            int tags_count = tagsArray.length;
            Tag[] t1_array = new Tag[tags_count];
            int temp=0;
            for (String tag : tagsArray) {
                t1_array[temp] = new Tag();
                t1_array[temp].setName(tag);
                temp++;

            }
            body.setTags(Arrays.asList(t1_array));
            cat.setName(Category);
            body.setCategory(cat);
            String[] photourl = PhotorUls.split(";");
            body.setPhotoUrls(Arrays.asList(photourl));
            body_response = api.addPetWithHttpInfo(body);

        }

    /**
     * Deletes a pet
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Then ("^Delete the Pet (.+)$")
    public void deletePetTest(String Id) throws ApiException {
        Long petId = Long.parseLong(Id);
        ApiKeyAuth auth = new ApiKeyAuth("header", "api_key");
        String apiKey = auth.getApiKey();
        api.deletePet(petId, apiKey);


    }
    
    /**
     * Finds Pets by status
     *
     * Multiple status values can be provided with comma separated strings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findPetsByStatusTest() throws ApiException {
        List<String> status = null;
        List<Pet> response = api.findPetsByStatus(status);


    }
    
    /**
     * Finds Pets by tags
     *
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findPetsByTagsTest() throws ApiException {
        List<String> tags = null;
        List<Pet> response = api.findPetsByTags(tags);
    }
    
    /**
     * Find pet by ID
     *
     * Returns a single pet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Rule
    public ExpectedException expectedEx = ExpectedException.none();
    @Then ("^Verify details for (.+)$")
    public void getPetByIdTest(String Id) throws ApiException {
        Long petId = Long.parseLong(Id);
        try {
            body_response = api.getPetByIdWithHttpInfo(petId);
            Assert.assertEquals(body.getId(), body_response.getData().getId());
            Assert.assertEquals(body.getName(), body_response.getData().getName());
            Assert.assertEquals(body.getStatus(), body_response.getData().getStatus());
            Assert.assertEquals(body.getPhotoUrls(), body_response.getData().getPhotoUrls());
        } catch (Exception e) {
            expectedEx.expect(io.swagger.client.ApiException.class);
            Assert.assertEquals("Not Found", e.getMessage());
        }
    }
    
    /**
     * Update an existing pet
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Then ("^Update the name to (.+)$")
    public void updatePetTest(String name) throws ApiException {
        body.setName(name);
        api.updatePet(body);
    }
    
    /**
     * Updates a pet in the store with form data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePetWithFormTest() throws ApiException {
        Long petId = null;
        String name = null;
        String status = null;
        api.updatePetWithForm(petId, name, status);
    }
    
    /**
     * uploads an image
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        Long petId = null;
        String additionalMetadata = null;
        File file = null;
        ModelApiResponse response = api.uploadFile(petId, additionalMetadata, file);
    }
    
}
